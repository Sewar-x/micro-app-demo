// mock/login.ts
var urlPrefix = "/test";
var login_default = [
  {
    url: urlPrefix + "/login",
    method: "post",
    response: (params) => {
      console.log("\u{1F680}\u767B\u5F55\u63A5\u53E3  /api/login :", params);
      const expire = (/* @__PURE__ */ new Date()).getTime() + 20 * 60 * 1e3;
      return {
        "code": 200,
        "message": "\u83B7\u53D6\u8D26\u53F7\u6210\u529F",
        "result": {
          "name": "xxxxx",
          "id": 111,
          "token": "1222222xxxxxxxxxxxxxxxxxxxxxxx",
          "expire": expire,
          "userInfo": {
            "id": 1,
            "name": "\u5F20\u4E09"
          }
        }
      };
    }
  },
  {
    url: urlPrefix + "/logout",
    method: "post",
    response: (params) => {
      console.log("\u{1F680}\u9000\u51FA\u767B\u5F55\u63A5\u53E3  /api/logout :", params);
      return {
        "code": 200,
        "message": "\u{1F680}\u9000\u51FA\u767B\u5F55\u63A5\u53E3\u6210\u529F"
      };
    }
  },
  {
    url: urlPrefix + "/getAuthList",
    method: "post",
    response: (params) => {
      console.log("\u{1F680}\u83B7\u53D6\u7528\u6237\u6743\u9650\u5217\u8868  /getAuthList:", params);
      return {
        "code": 200,
        "message": "\u{1F680}\u83B7\u53D6\u7528\u6237\u6743\u9650\u5217\u8868\u6210\u529F",
        "result": {
          menuNames: [
            "authMenus",
            "authMenu1",
            "authMenu2",
            "asyncMenus",
            "asyncMenu1",
            "asyncMenu2",
            "asyncMenu3"
          ],
          // 菜单权限名称列表
          rule: []
          // 按钮级别权限
        }
      };
    }
  },
  {
    url: urlPrefix + "/checkSSOLogin",
    method: "post",
    response: (params) => {
      console.log("\u{1F680}\u6362\u53D6\u5355\u70B9\u767B\u5F55\u63A5\u53E3", params);
      const expire = (/* @__PURE__ */ new Date()).getTime() + 21 * 60 * 1e3;
      return {
        "code": 200,
        "message": "\u5237\u65B0 token\u6210\u529F",
        "result": {
          "token": `${params.body.token}+${expire}`,
          "expire": expire,
          "sso": []
        }
      };
    }
  },
  {
    url: urlPrefix + "/refresh-token",
    method: "post",
    response: (params) => {
      console.log("\u{1F680}\u5237\u65B0 token \u63A5\u53E3  /refresh-token:", params);
      const expire = (/* @__PURE__ */ new Date()).getTime() + 21 * 60 * 1e3;
      return {
        "code": 200,
        "message": "\u{1F680}\u5237\u65B0 token\u6210\u529F",
        "result": {
          "token": `${params.body.token}+${expire}`,
          "expires": expire
        }
      };
    }
  }
];
export {
  login_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibW9jay9sb2dpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJEOlxcXFxNT0tBXFxcXG1pY3JvLWFwcC1kZW1vXFxcXHBhY2thZ2VzXFxcXHZ1ZS1hcHAtc2NhZmZvbGRcXFxcbW9ja1xcXFxsb2dpbi50c1wiO2NvbnN0IF9faW5qZWN0ZWRfZGlybmFtZV9fID0gXCJEOlxcXFxNT0tBXFxcXG1pY3JvLWFwcC1kZW1vXFxcXHBhY2thZ2VzXFxcXHZ1ZS1hcHAtc2NhZmZvbGRcXFxcbW9ja1wiO2NvbnN0IF9faW5qZWN0ZWRfaW1wb3J0X21ldGFfdXJsX18gPSBcImZpbGU6Ly8vRDovTU9LQS9taWNyby1hcHAtZGVtby9wYWNrYWdlcy92dWUtYXBwLXNjYWZmb2xkL21vY2svbG9naW4udHNcIjtpbXBvcnQgeyBNb2NrTWV0aG9kIH0gZnJvbSAndml0ZS1wbHVnaW4tbW9jayc7XHJcbmNvbnN0IHVybFByZWZpeCA9IFwiL3Rlc3RcIlxyXG5leHBvcnQgZGVmYXVsdCBbXHJcbiAgICB7XHJcbiAgICAgICAgdXJsOiB1cmxQcmVmaXggKyAnL2xvZ2luJyxcclxuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgICByZXNwb25zZTogKHBhcmFtcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REU4MFx1NzY3Qlx1NUY1NVx1NjNBNVx1NTNFMyAgL2FwaS9sb2dpbiA6XCIscGFyYW1zKVxyXG4gICAgICAgICAgICBjb25zdCBleHBpcmUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIDIwICogNjAgKiAxMDAwXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAnY29kZSc6IDIwMCxcclxuICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJ1x1ODNCN1x1NTNENlx1OEQyNlx1NTNGN1x1NjIxMFx1NTI5RicsXHJcbiAgICAgICAgICAgICAgICAncmVzdWx0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgICduYW1lJzogJ3h4eHh4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWQnOiAxMTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Rva2VuJzogJzEyMjIyMjJ4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V4cGlyZSc6IGV4cGlyZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXNlckluZm8nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ1x1NUYyMFx1NEUwOSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdXJsOiB1cmxQcmVmaXggKyAgJy9sb2dvdXQnLFxyXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgIHJlc3BvbnNlOiAocGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERTgwXHU5MDAwXHU1MUZBXHU3NjdCXHU1RjU1XHU2M0E1XHU1M0UzICAvYXBpL2xvZ291dCA6XCIscGFyYW1zKVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ2NvZGUnOiAyMDAsXHJcbiAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdcdUQ4M0RcdURFODBcdTkwMDBcdTUxRkFcdTc2N0JcdTVGNTVcdTYzQTVcdTUzRTNcdTYyMTBcdTUyOUYnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdXJsOiB1cmxQcmVmaXggKyAnL2dldEF1dGhMaXN0JyxcclxuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgICByZXNwb25zZTogKHBhcmFtcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REU4MFx1ODNCN1x1NTNENlx1NzUyOFx1NjIzN1x1Njc0M1x1OTY1MFx1NTIxN1x1ODg2OCAgL2dldEF1dGhMaXN0OlwiLCBwYXJhbXMpXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAnY29kZSc6IDIwMCxcclxuICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJ1x1RDgzRFx1REU4MFx1ODNCN1x1NTNENlx1NzUyOFx1NjIzN1x1Njc0M1x1OTY1MFx1NTIxN1x1ODg2OFx1NjIxMFx1NTI5RicsXHJcbiAgICAgICAgICAgICAgICAncmVzdWx0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lbnVOYW1lczogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImF1dGhNZW51c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImF1dGhNZW51MVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImF1dGhNZW51MlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYXN5bmNNZW51cycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhc3luY01lbnUxJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FzeW5jTWVudTInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYXN5bmNNZW51MydcclxuICAgICAgICAgICAgICAgICAgICBdLCAvLyBcdTgzRENcdTUzNTVcdTY3NDNcdTk2NTBcdTU0MERcdTc5RjBcdTUyMTdcdTg4NjhcclxuICAgICAgICAgICAgICAgICAgICBydWxlOiBbXSwvLyBcdTYzMDlcdTk0QUVcdTdFQTdcdTUyMkJcdTY3NDNcdTk2NTBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHVybDogIHVybFByZWZpeCArICAnL2NoZWNrU1NPTG9naW4nLFxyXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgIHJlc3BvbnNlOiAocGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERTgwXHU2MzYyXHU1M0Q2XHU1MzU1XHU3MEI5XHU3NjdCXHU1RjU1XHU2M0E1XHU1M0UzXCIsIHBhcmFtcylcclxuICAgICAgICAgICAgY29uc3QgZXhwaXJlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyAyMSAqIDYwICogMTAwMFxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ2NvZGUnOiAyMDAsXHJcbiAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdcdTUyMzdcdTY1QjAgdG9rZW5cdTYyMTBcdTUyOUYnLFxyXG4gICAgICAgICAgICAgICAgJ3Jlc3VsdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAndG9rZW4nOiBgJHtwYXJhbXMuYm9keS50b2tlbn0rJHtleHBpcmV9YCxcclxuICAgICAgICAgICAgICAgICAgICAnZXhwaXJlJzogZXhwaXJlLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic3NvXCI6IFtdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB1cmw6ICB1cmxQcmVmaXggKyAnL3JlZnJlc2gtdG9rZW4nLFxyXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgIHJlc3BvbnNlOiAocGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERTgwXHU1MjM3XHU2NUIwIHRva2VuIFx1NjNBNVx1NTNFMyAgL3JlZnJlc2gtdG9rZW46XCIsIHBhcmFtcylcclxuICAgICAgICAgICAgY29uc3QgZXhwaXJlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyAyMSAqIDYwICogMTAwMFxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ2NvZGUnOiAyMDAsXHJcbiAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdcdUQ4M0RcdURFODBcdTUyMzdcdTY1QjAgdG9rZW5cdTYyMTBcdTUyOUYnLFxyXG4gICAgICAgICAgICAgICAgJ3Jlc3VsdCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAndG9rZW4nOiBgJHtwYXJhbXMuYm9keS50b2tlbn0rJHtleHBpcmV9YCxcclxuICAgICAgICAgICAgICAgICAgICAnZXhwaXJlcyc6IGV4cGlyZVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICB9XHJcbl0gYXMgTW9ja01ldGhvZFtdO1xyXG5cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUNBLElBQU0sWUFBWTtBQUNsQixJQUFPLGdCQUFRO0FBQUEsRUFDWDtBQUFBLElBQ0ksS0FBSyxZQUFZO0FBQUEsSUFDakIsUUFBUTtBQUFBLElBQ1IsVUFBVSxDQUFDLFdBQVc7QUFDbEIsY0FBUSxJQUFJLG1EQUF1QixNQUFNO0FBQ3pDLFlBQU0sVUFBUyxvQkFBSSxLQUFLLEdBQUUsUUFBUSxJQUFJLEtBQUssS0FBSztBQUNoRCxhQUFPO0FBQUEsUUFDSCxRQUFRO0FBQUEsUUFDUixXQUFXO0FBQUEsUUFDWCxVQUFVO0FBQUEsVUFDTixRQUFRO0FBQUEsVUFDSSxNQUFNO0FBQUEsVUFDTixTQUFTO0FBQUEsVUFDVCxVQUFVO0FBQUEsVUFDVixZQUFZO0FBQUEsWUFDUixNQUFNO0FBQUEsWUFDTixRQUFRO0FBQUEsVUFDWjtBQUFBLFFBQ2hCO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQUEsRUFDQTtBQUFBLElBQ0ksS0FBSyxZQUFhO0FBQUEsSUFDbEIsUUFBUTtBQUFBLElBQ1IsVUFBVSxDQUFDLFdBQVc7QUFDbEIsY0FBUSxJQUFJLGdFQUEwQixNQUFNO0FBQzVDLGFBQU87QUFBQSxRQUNILFFBQVE7QUFBQSxRQUNSLFdBQVc7QUFBQSxNQUNmO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUNBO0FBQUEsSUFDSSxLQUFLLFlBQVk7QUFBQSxJQUNqQixRQUFRO0FBQUEsSUFDUixVQUFVLENBQUMsV0FBVztBQUNsQixjQUFRLElBQUksNEVBQTZCLE1BQU07QUFDL0MsYUFBTztBQUFBLFFBQ0gsUUFBUTtBQUFBLFFBQ1IsV0FBVztBQUFBLFFBQ1gsVUFBVTtBQUFBLFVBQ04sV0FBVztBQUFBLFlBQ1A7QUFBQSxZQUNBO0FBQUEsWUFDQTtBQUFBLFlBQ0E7QUFBQSxZQUNBO0FBQUEsWUFDQTtBQUFBLFlBQ0E7QUFBQSxVQUNKO0FBQUE7QUFBQSxVQUNBLE1BQU0sQ0FBQztBQUFBO0FBQUEsUUFDWDtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBQ0E7QUFBQSxJQUNJLEtBQU0sWUFBYTtBQUFBLElBQ25CLFFBQVE7QUFBQSxJQUNSLFVBQVUsQ0FBQyxXQUFXO0FBQ2xCLGNBQVEsSUFBSSw2REFBYyxNQUFNO0FBQ2hDLFlBQU0sVUFBUyxvQkFBSSxLQUFLLEdBQUUsUUFBUSxJQUFJLEtBQUssS0FBSztBQUNoRCxhQUFPO0FBQUEsUUFDSCxRQUFRO0FBQUEsUUFDUixXQUFXO0FBQUEsUUFDWCxVQUFVO0FBQUEsVUFDTixTQUFTLEdBQUcsT0FBTyxLQUFLLEtBQUssSUFBSSxNQUFNO0FBQUEsVUFDdkMsVUFBVTtBQUFBLFVBQ1YsT0FBTyxDQUFDO0FBQUEsUUFDWjtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBQ0E7QUFBQSxJQUNJLEtBQU0sWUFBWTtBQUFBLElBQ2xCLFFBQVE7QUFBQSxJQUNSLFVBQVUsQ0FBQyxXQUFXO0FBQ2xCLGNBQVEsSUFBSSw2REFBa0MsTUFBTTtBQUNwRCxZQUFNLFVBQVMsb0JBQUksS0FBSyxHQUFFLFFBQVEsSUFBSSxLQUFLLEtBQUs7QUFDaEQsYUFBTztBQUFBLFFBQ0gsUUFBUTtBQUFBLFFBQ1IsV0FBVztBQUFBLFFBQ1gsVUFBVTtBQUFBLFVBQ04sU0FBUyxHQUFHLE9BQU8sS0FBSyxLQUFLLElBQUksTUFBTTtBQUFBLFVBQ3ZDLFdBQVc7QUFBQSxRQUVmO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
